#!/usr/bin/env bash
command=$1
if [[ -z "$command" ]]; then
  >&2 echo 'Please specify the command as first argument'
  exit 1
fi

folder="src/$command"
if [[ -d "$folder" ]]; then
  >&2 echo "Command's folder exists already: $folder"
  exit 1
fi

mkdir "$folder"
PHP_HEADER=$(cat <<EOF
<?php declare(strict_types=1);

/*
  Copyright (c) 2023, Manticore Software LTD (https://manticoresearch.com)

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2 or any later
  version. You should have received a copy of the GPL license along with this
  program; if you did not, you can find it at http://www.gnu.org/
*/

EOF
)

# We need to change owner to proper one in case creating files from container
owner=$(stat -c%u:%g .)

executor_file="$folder/Executor.php"
echo "Creating $executor_file"
cat > "$executor_file" << EOF
${PHP_HEADER}
namespace Manticoresearch\\Buddy\\${command};

use Manticoresearch\Buddy\Interface\CommandExecutorInterface;
use Manticoresearch\Buddy\Lib\Task\Task;
use Manticoresearch\Buddy\Network\ManticoreClient\HTTPClient;
use RuntimeException;
use parallel\Runtime;

final class Executor implements CommandExecutorInterface {
  /** @var HTTPClient \$manticoreClient */
	protected HTTPClient \$manticoreClient;

	/**
	 * Initialize the executor
	 *
	 * @param Request \$request
	 * @return void
	 */
	public function __construct(public Request \$request) {
	}

  /**
	 * Process the request
	 *
	 * @return Task
	 * @throws RuntimeException
	 */
	public function run(Runtime \$runtime): Task {
    // TODO: modify your code here â¬‡

    \$this->manticoreClient->setPath(\$this->request->path);

    \$taskFn = static function (Request \$request, HTTPClient \$manticoreClient): array {
			\$query = 'SHOW TABLES';
			\$resp = \$manticoreClient->sendRequest(\$query);
			return \$resp->getResult();
    };

    return Task::createInRuntime(
			\$runtime, \$taskFn, [\$this->request, \$this->manticoreClient]
		)->run();
  }

	/**
	 * @return array<string>
	 */
	public function getProps(): array {
		return ['manticoreClient'];
	}

	/**
	 * Instantiating the http client to execute requests to Manticore server
	 *
	 * @param HTTPClient \$client
	 * \$return HTTPClient
	 */
	public function setManticoreClient(HTTPClient \$client): HTTPClient {
		\$this->manticoreClient = \$client;
		return \$this->manticoreClient;
	}
}
EOF

request_file="$folder/Request.php"
echo "Creating $request_file"
cat > "$request_file" << EOF
${PHP_HEADER}
namespace Manticoresearch\\Buddy\\${command};

use Manticoresearch\Buddy\Base\CommandRequestBase;
use Manticoresearch\Buddy\Enum\ManticoreEndpoint;
use Manticoresearch\Buddy\Exception\SQLQueryParsingError;
use Manticoresearch\Buddy\Network\Request as NetRequest;

final class Request extends CommandRequestBase {
  // TODO: your props definition goes here ðŸ‘‡

	public string \$path;

	public function __construct() {
	}

  /**
	 * @param NetRequest \$request
	 * @return self
	 */
	public static function fromNetworkRequest(NetRequest \$request): Request {
    // TODO: add your code to process request
    \$self = new self();
    \$self->path = \$request->path;
		return \$self;
  }
}
EOF

echo 'Adjusting ownership'
chown -hR "$owner" "$folder"

echo 'Adding variation to Enum\Command'
enum_command_file='src/Enum/Command.php'
head -n -2 "$enum_command_file" > "$enum_command_file.tmp"
echo -e "\tcase ${command} = '${command}';" >> "$enum_command_file.tmp"
tail -n 2 "$enum_command_file" >> "$enum_command_file.tmp"
mv "$enum_command_file.tmp" "$enum_command_file"

echo 'Adding handling request to command to Lib\QueryProcessor'
query_processor_file='src/Lib/QueryProcessor.php'
line_no=$(grep -n 'default => throw new SQLQueryCommandNotSupported' "$query_processor_file" | cut -d: -f1)
line_count=$(wc -l src/Lib/QueryProcessor.php | cut -d' ' -f1)
head -n "$((line_no - 1))" "$query_processor_file" > "$query_processor_file.tmp"
{
  echo -e "\t\t\t//TODO: fix next line"
  echo -e "\t\t\tstr_starts_with(\$queryLowercase, '${command}') => Command::${command},"
} >> "$query_processor_file.tmp"
tail -n "$((line_count - line_no + 1))" "$query_processor_file" >> "$query_processor_file.tmp"
mv "$query_processor_file.tmp" "$query_processor_file"

echo 'done'
